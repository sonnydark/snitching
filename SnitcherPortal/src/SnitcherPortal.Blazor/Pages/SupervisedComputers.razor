@page "/supervised-computers"

@attribute [Authorize(SnitcherPortalPermissions.SupervisedComputers.Default)]
@using SnitcherPortal.SupervisedComputers
@using SnitcherPortal.Localization
@using SnitcherPortal.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using SnitcherPortal.SnitchingLogs
@using SnitcherPortal.ActivityRecords
@using SnitcherPortal.Calendars
@using SnitcherPortal.KnownProcesses

@using SnitcherPortal.Permissions

@inherits SnitcherPortalComponentBase
@inject ISupervisedComputersAppService SupervisedComputersAppService
@inject ISnitchingLogsAppService SnitchingLogsAppService
@inject IActivityRecordsAppService ActivityRecordsAppService
@inject ICalendarsAppService CalendarsAppService
@inject IKnownProcessesAppService KnownProcessesAppService

@inject IUiMessageService UiMessageService

@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["SupervisedComputers"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">
</PageHeader>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="SupervisedComputerDto"
                  Data="SupervisedComputerList"
                  DetailRowTrigger="@((x) => { x.Single = true; return ShouldShowDetailRow(); })"
                  DetailRowStartsVisible="false"
                  RowClicked="@((e) => { if (e.Item.Id == SelectedSupervisedComputer?.Id) { SelectedSupervisedComputer = null; } else { SelectedSupervisedComputer = e.Item; } })"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <DataGridColumns>
                @if (ShouldShowDetailRow())
                {
                    <DataGridColumn TItem="SupervisedComputerDto"
                                    Field="Id"
                                    Width="0.5rem">
                        <DisplayTemplate>
                            @if (context.Id == SelectedSupervisedComputer?.Id)
                            {
                                <i class="fas fa-chevron-up" />
                            }
                            else
                            {
                                <i class="fas fa-chevron-down" />
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                }
                <DataGridEntityActionsColumn TItem="SupervisedComputerDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="SupervisedComputerDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="SupervisedComputerDto"
                                          Visible="@CanEditSupervisedComputer"
                                          Clicked="async () => await OpenEditSupervisedComputerModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="SupervisedComputerDto"
                                          Visible="@CanDeleteSupervisedComputer"
                                          Clicked="() => DeleteSupervisedComputerAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

                <DataGridColumn TItem="SupervisedComputerDto"
                                Field="Name"
                                Caption="@L["Name"]">
                </DataGridColumn>

                <DataGridColumn TItem="SupervisedComputerDto"
                                Field="Identifier"
                                Caption="@L["Identifier"]">
                </DataGridColumn>

                <DataGridColumn TItem="SupervisedComputerDto"
                                Field="IpAddress"
                                Caption="@L["IpAddress"]">
                </DataGridColumn>

                <DataGridColumn TItem="SupervisedComputerDto"
                                Field="Status"
                                Caption="@L["Status"]">
                </DataGridColumn>

                <DataGridColumn TItem="SupervisedComputerDto"
                                Field="IsCalendarActive"
                                Caption="@L["IsCalendarActive"]">
                    <DisplayTemplate>
                        @if (context.IsCalendarActive)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
                </DataGridColumn>


                <DataGridColumn TItem="SupervisedComputerDto"
                                Field="BanUntil"
                                Caption="@L["BanUntil"]">
                    <DisplayTemplate>
                        @(context.BanUntil.HasValue ? context.BanUntil.Value.ToShortDateString() : string.Empty)
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>

            <DetailRowTemplate>
                <div class="bg-light rounded p-3 pb-0 pt-1">
                    <Tabs SelectedTab="@SelectedChildTab" SelectedTabChanged="@OnSelectedChildTabChanged">
                        <Items>
                                <Tab Name="activityrecord-tab">@L["ActivityRecords"]</Tab>
                                <Tab Name="snitchinglog-tab">@L["SnitchingLogs"]</Tab>
                                <Tab Name="calendar-tab">@L["Calendars"]</Tab>
                                <Tab Name="knownprocess-tab">@L["KnownProcesses"]</Tab>
                            </Items>

                            <Content>
                                <TabPanel Name="snitchinglog-tab" Class="mt-0">

                                    @{
                                    var snitchingLogs = (context as SupervisedComputerDto).SnitchingLogs;

                                    <DataGrid @ref="@SnitchingLogDataGrids[context.Id]"
                                              TItem="SnitchingLogDto"
                                              Data="snitchingLogs"
                                              ReadData="@((args) => OnSnitchingLogDataGridReadAsync(args, context.Id))"
                                              Sortable="true"
                                              ShowCaptions="true"
                                              ShowPager="true"
                                              Responsive="true"
                                              PageSize="SnitchingLogPageSize">

                                        <DataGridColumns>

                                            <DataGridColumn TItem="SnitchingLogDto"
                                                            Field="Timestamp"
                                                            Caption="@L["Timestamp"]">
                                                <DisplayTemplate Context="ctx1">
                                                    @ctx1.Timestamp.ToString("yyyy dd.MM HH:mm")
                                                </DisplayTemplate>
                                            </DataGridColumn>

                                            <DataGridColumn TItem="SnitchingLogDto"
                                                            Field="Message"
                                                            Caption="@L["Message"]">
                                            </DataGridColumn>

                                        </DataGridColumns>
                                    </DataGrid>
                                }
                            </TabPanel>
                            <TabPanel Name="activityrecord-tab" Class="mt-0">

                                @{
                                    var activityRecords = (context as SupervisedComputerDto).ActivityRecords;

                                    <DataGrid @ref="@ActivityRecordDataGrids[context.Id]"
                                              TItem="ActivityRecordDto"
                                              Data="activityRecords"
                                              ReadData="@((args) => OnActivityRecordDataGridReadAsync(args, context.Id))"
                                              Sortable="true"
                                              ShowCaptions="true"
                                              ShowPager="true"
                                              Responsive="true"
                                              PageSize="ActivityRecordPageSize">

                                        <DataGridColumns>

                                            <DataGridColumn TItem="ActivityRecordDto"
                                                            Field="StartTime"
                                                            Caption="@L["StartTime"]">
                                                <DisplayTemplate Context="ctx2">
                                                    @ctx2.StartTime.ToString("yyyy dd.MM HH:mm")
                                                </DisplayTemplate>
                                            </DataGridColumn>

                                            <DataGridColumn TItem="ActivityRecordDto"
                                                            Field="EndTime"
                                                            Caption="@L["EndTime"]">
                                                <DisplayTemplate Context="ctx3">
                                                    @(ctx3.EndTime.HasValue ? ctx3.EndTime.Value.ToString("yyyy dd.MM HH:mm") : string.Empty)
                                                </DisplayTemplate>
                                            </DataGridColumn>

                                            <DataGridColumn TItem="ActivityRecordDto"
                                                            Field="Data"
                                                            Caption="@L["Data"]">
                                            </DataGridColumn>

                                        </DataGridColumns>
                                    </DataGrid>
                                }
                            </TabPanel>
                            <TabPanel Name="calendar-tab" Class="mt-0">
                                @{
                                    var calendars = (context as SupervisedComputerDto).Calendars;

                                    <DataGrid @ref="@CalendarDataGrids[context.Id]"
                                              TItem="CalendarDto"
                                              Data="calendars"
                                              ReadData="@((args) => OnCalendarDataGridReadAsync(args, context.Id))"
                                              Sortable="true"
                                              ShowCaptions="true"
                                              ShowPager="true"
                                              Responsive="true"
                                              PageSize="CalendarPageSize">

                                        <DataGridColumns>

                                            <DataGridEntityActionsColumn TItem="CalendarDto" @ref="@CalendarEntityActionsColumns">
                                                <DisplayTemplate Context="calendar_context">
                                                    <EntityActions TItem="CalendarDto" EntityActionsColumn="@CalendarEntityActionsColumns">
                                                        <EntityAction TItem="CalendarDto"
                                                                      Visible="@CanEditCalendar"
                                                                      Clicked="async () => await OpenEditCalendarModalAsync(calendar_context)"
                                                                      Text="@L["Edit"]">
                                                        </EntityAction>
                                                    </EntityActions>
                                                </DisplayTemplate>
                                            </DataGridEntityActionsColumn>

                                            <DataGridCommandColumn />


                                            <DataGridColumn TItem="CalendarDto"
                                                            Field="DayOfWeek"
                                                            Caption="@L["DayOfWeek"]">
                                                <DisplayTemplate Context="calendar_context">
                                                    <Span>@(((DayOfWeek)calendar_context.DayOfWeek).ToString())</Span>
                                                </DisplayTemplate>
                                            </DataGridColumn>

                                            <DataGridColumn TItem="CalendarDto"
                                                            Field="AllowedHours"
                                                            Caption="@L["AllowedHours"]">
                                            </DataGridColumn>

                                        </DataGridColumns>
                                    </DataGrid>
                                }
                            </TabPanel>
                            <TabPanel Name="knownprocess-tab" Class="mt-0">
                                @if (CanCreateKnownProcess)
                                {
                                    <Row Class="mb-2">
                                        <Column Class="d-flex justify-content-end">
                                            <Button Color="Color.Primary" Class="ms-2" Clicked="async () => await OpenCreateKnownProcessModalAsync(context.Id)">
                                                <i class="fas fa-plus me-1"></i>@L["NewKnownProcess"]
                                            </Button>

                                            <Button Color="Color.Primary" Class="ms-2" Clicked="async () => await MarkUnmarkHiddenAsync(context.Id, true)">
                                                <i class="fas fa-check me-1"></i>@L["Mark all as hidden"]
                                            </Button>

                                            <Button Color="Color.Primary" Class="ms-2" Clicked="async () => await MarkUnmarkHiddenAsync(context.Id, false)">
                                                <i class="fas fa-ban me-1"></i>@L["Unmark all hidden"]
                                            </Button>
                                        </Column>
                                    </Row>
                                }

                                @{
                                    var knownProcesses = (context as SupervisedComputerDto).KnownProcesses;

                                    <DataGrid @ref="@KnownProcessDataGrids[context.Id]"
                                              TItem="KnownProcessDto"
                                              Data="knownProcesses"
                                              ReadData="@((args) => OnKnownProcessDataGridReadAsync(args, context.Id))"
                                              Sortable="true"
                                              ShowCaptions="true"
                                              ShowPager="true"
                                              Responsive="true"
                                              PageSize="KnownProcessPageSize">

                                        <DataGridColumns>

                                            <DataGridEntityActionsColumn TItem="KnownProcessDto" @ref="@KnownProcessEntityActionsColumns">
                                                <DisplayTemplate Context="known_process_context">
                                                    <EntityActions TItem="KnownProcessDto" EntityActionsColumn="@KnownProcessEntityActionsColumns">
                                                        <EntityAction TItem="KnownProcessDto"
                                                                      Visible="@CanEditKnownProcess"
                                                                      Clicked="async () => await OpenEditKnownProcessModalAsync(known_process_context)"
                                                                      Text="@L["Edit"]">
                                                        </EntityAction>
                                                        <EntityAction TItem="KnownProcessDto"
                                                                      Visible="@CanDeleteKnownProcess"
                                                                      Clicked="async () => await DeleteKnownProcessAsync(known_process_context)"
                                                                      ConfirmationMessage="@(() => L["DeleteConfirmationMessage"])"
                                                                      Text="@L["Delete"]">
                                                        </EntityAction>
                                                    </EntityActions>
                                                </DisplayTemplate>
                                            </DataGridEntityActionsColumn>

                                            <DataGridCommandColumn />


                                            <DataGridColumn TItem="KnownProcessDto"
                                                            Field="Name"
                                                            Caption="@L["Name"]">
                                            </DataGridColumn>

                                            <DataGridColumn TItem="KnownProcessDto"
                                                            Field="IsHidden"
                                                            Caption="@L["IsHidden"]">
                                                <DisplayTemplate Context="ctx4">
                                                    @if (ctx4.IsHidden)
                                                    {
                                                        <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                                                    }
                                                    else
                                                    {
                                                        <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                                                    }
                                                </DisplayTemplate>
                                            </DataGridColumn>


                                            <DataGridColumn TItem="KnownProcessDto"
                                                            Field="IsImportant"
                                                            Caption="@L["IsImportant"]">
                                                <DisplayTemplate Context="ctx5">
                                                    @if (ctx5.IsImportant)
                                                    {
                                                        <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                                                    }
                                                    else
                                                    {
                                                        <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                                                    }
                                                </DisplayTemplate>
                                            </DataGridColumn>


                                        </DataGridColumns>
                                    </DataGrid>
                                }
                            </TabPanel>
                        </Content>
                    </Tabs>
                </div>
            </DetailRowTemplate>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateSupervisedComputerModal" Closing="@CreateSupervisedComputerModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateSupervisedComputerForm">
            <ModalHeader>
                <ModalTitle>@L["NewSupervisedComputer"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateSupervisedComputerModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@NewSupervisedComputerValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@NewSupervisedComputer"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewSupervisedComputer.Name" MaxLength="SupervisedComputerConsts.NameMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["Identifier"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewSupervisedComputer.Identifier" MaxLength="SupervisedComputerConsts.IdentifierMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["IpAddress"]</FieldLabel>
                                <TextEdit @bind-Text="@NewSupervisedComputer.IpAddress" MaxLength="SupervisedComputerConsts.IpAddressMaxLength">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>


                        <Field>
                            <Check TValue="bool" @bind-Checked="@NewSupervisedComputer.IsCalendarActive">@L["IsCalendarActive"]</Check>
                        </Field>

                        <Validation>
                            <Field>
                                <FieldLabel>@L["BanUntil"]</FieldLabel>
                                <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@NewSupervisedComputer.BanUntil">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>




                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseCreateSupervisedComputerModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateSupervisedComputerForm" Clicked="CreateSupervisedComputerAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditSupervisedComputerModal" Closing="@EditSupervisedComputerModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditSupervisedComputerForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                    <CloseButton Clicked="CloseEditSupervisedComputerModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditingSupervisedComputerValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@EditingSupervisedComputer"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingSupervisedComputer.Name" MaxLength="SupervisedComputerConsts.NameMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["Identifier"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingSupervisedComputer.Identifier" MaxLength="SupervisedComputerConsts.IdentifierMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["IpAddress"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingSupervisedComputer.IpAddress" MaxLength="SupervisedComputerConsts.IpAddressMaxLength">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>


                        <Field>
                            <Check TValue="bool" @bind-Checked="@EditingSupervisedComputer.IsCalendarActive">@L["IsCalendarActive"]</Check>
                        </Field>

                        <Validation>
                            <Field>
                                <FieldLabel>@L["BanUntil"]</FieldLabel>
                                <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@EditingSupervisedComputer.BanUntil">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>




                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseEditSupervisedComputerModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="EditSupervisedComputerForm" Clicked="UpdateSupervisedComputerAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* SnitchingLog: CREATE MODAL ************************* *@
<Modal @ref="CreateSnitchingLogModal" Closing="@CreateSnitchingLogModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateSnitchingLogForm">
            <ModalHeader>
                <ModalTitle>@L["NewSnitchingLog"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateSnitchingLogModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@NewSnitchingLogValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@NewSnitchingLog"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Timestamp"]</FieldLabel>
                                <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime" @bind-Date="@NewSnitchingLog.Timestamp">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Message"]</FieldLabel>
                                <TextEdit @bind-Text="@NewSnitchingLog.Message">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>



                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseCreateSnitchingLogModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateSnitchingLogForm" Clicked="CreateSnitchingLogAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* SnitchingLog: EDIT MODAL ************************* *@
<Modal @ref="EditSnitchingLogModal" Closing="@EditSnitchingLogModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditSnitchingLogForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                    <CloseButton Clicked="CloseEditSnitchingLogModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditingSnitchingLogValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@EditingSnitchingLog"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Timestamp"]</FieldLabel>
                                <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime" @bind-Date="@EditingSnitchingLog.Timestamp">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Message"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingSnitchingLog.Message">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>



                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseEditSnitchingLogModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="EditSnitchingLogForm" Clicked="UpdateSnitchingLogAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@* ************************* ActivityRecord: CREATE MODAL ************************* *@
<Modal @ref="CreateActivityRecordModal" Closing="@CreateActivityRecordModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateActivityRecordForm">
            <ModalHeader>
                <ModalTitle>@L["NewActivityRecord"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateActivityRecordModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@NewActivityRecordValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@NewActivityRecord"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["StartTime"]</FieldLabel>
                                <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime" @bind-Date="@NewActivityRecord.StartTime">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["EndTime"]</FieldLabel>
                                <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@NewActivityRecord.EndTime">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Data"]</FieldLabel>
                                <TextEdit @bind-Text="@NewActivityRecord.Data">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>



                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseCreateActivityRecordModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateActivityRecordForm" Clicked="CreateActivityRecordAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* ActivityRecord: EDIT MODAL ************************* *@
<Modal @ref="EditActivityRecordModal" Closing="@EditActivityRecordModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditActivityRecordForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                    <CloseButton Clicked="CloseEditActivityRecordModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditingActivityRecordValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@EditingActivityRecord"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["StartTime"]</FieldLabel>
                                <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime" @bind-Date="@EditingActivityRecord.StartTime">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["EndTime"]</FieldLabel>
                                <DateEdit TValue="DateTime?" InputMode="DateInputMode.DateTime" @bind-Date="@EditingActivityRecord.EndTime">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </DateEdit>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Data"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingActivityRecord.Data">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>



                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseEditActivityRecordModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="EditActivityRecordForm" Clicked="UpdateActivityRecordAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@* ************************* Calendar: CREATE MODAL ************************* *@
<Modal @ref="CreateCalendarModal" Closing="@CreateCalendarModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateCalendarForm">
            <ModalHeader>
                <ModalTitle>@L["NewCalendar"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateCalendarModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@NewCalendarValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@NewCalendar"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["DayOfWeek"]</FieldLabel>
                                <NumericPicker TValue="int" @bind-Value="@NewCalendar.DayOfWeek" Decimals="0">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericPicker>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["AllowedHours"]</FieldLabel>
                                <TextEdit @bind-Text="@NewCalendar.AllowedHours">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>



                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseCreateCalendarModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateCalendarForm" Clicked="CreateCalendarAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* Calendar: EDIT MODAL ************************* *@
<Modal @ref="EditCalendarModal" Closing="@EditCalendarModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <Form id="EditCalendarForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                    <CloseButton Clicked="CloseEditCalendarModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditingCalendarValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@EditingCalendar"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["DayOfWeek"]</FieldLabel>
                                <NumericPicker TValue="int" @bind-Value="@EditingCalendar.DayOfWeek" Decimals="0" ReadOnly="true">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </NumericPicker>
                            </Field>
                        </Validation>


                        <Validation>
                            <Field>
                                <FieldLabel>@L["AllowedHours"]</FieldLabel>
                                <TextEdit @bind-Text="@EditingCalendar.AllowedHours">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>



                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseEditCalendarModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="EditCalendarForm" Clicked="UpdateCalendarAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
@* ************************* KnownProcess: CREATE MODAL ************************* *@
<Modal @ref="CreateKnownProcessModal" Closing="@CreateKnownProcessModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateKnownProcessForm">
            <ModalHeader>
                <ModalTitle>@L["NewKnownProcess"]</ModalTitle>
                    <CloseButton Clicked="CloseCreateKnownProcessModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@NewKnownProcessValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@NewKnownProcess"
                                 ValidateOnLoad="false">


                        <Validation>
                            <Field>
                                <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewKnownProcess.Name" MaxLength="KnownProcessConsts.NameMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewKnownProcess.IsHidden">@L["IsHidden"]</Check>
                        </Field>

                        <Field>
                            <Check TValue="bool" @bind-Checked="@NewKnownProcess.IsImportant">@L["IsImportant"]</Check>
                        </Field>


                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseCreateKnownProcessModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateKnownProcessForm" Clicked="CreateKnownProcessAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@* ************************* KnownProcess: EDIT MODAL ************************* *@
<Modal @ref="EditKnownProcessModal" Closing="@EditKnownProcessModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="EditKnownProcessForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                    <CloseButton Clicked="CloseEditKnownProcessModalAsync" />
                </ModalHeader>
                <ModalBody>
                    <Validations @ref="@EditingKnownProcessValidations"
                                 Mode="ValidationMode.Auto"
                                 Model="@EditingKnownProcess"
                                 ValidateOnLoad="false">
                        <Validation>
                            <Field>
                                <FieldLabel>@L["Name"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingKnownProcess.Name" MaxLength="KnownProcessConsts.NameMaxLength">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingKnownProcess.IsHidden">@L["IsHidden"]</Check>
                        </Field>

                        <Field>
                            <Check TValue="bool" @bind-Checked="@EditingKnownProcess.IsImportant">@L["IsImportant"]</Check>
                        </Field>

                    </Validations>
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Secondary"
                            Clicked="CloseEditKnownProcessModalAsync">
                        @L["Cancel"]
                </Button>
                <SubmitButton Form="EditKnownProcessForm" Clicked="UpdateKnownProcessAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>